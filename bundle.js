!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var n,o=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),s=function(){function t(t,e){this.from=t,this.to=e}return Object.defineProperty(t.prototype,"slope",{get:function(){if(!this.isVertical)return(this.to.y-this.from.y)/(this.to.x-this.from.x)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"yIntercept",{get:function(){if(!this.isVertical)return-(this.from.x*this.to.y-this.to.x*this.from.y)/(this.to.x-this.from.x)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"minX",{get:function(){return Math.min(this.from.x,this.to.x)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxX",{get:function(){return Math.max(this.from.x,this.to.x)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"minY",{get:function(){return Math.min(this.from.y,this.to.y)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"maxY",{get:function(){return Math.max(this.from.y,this.to.y)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isVertical",{get:function(){return this.from.x===this.to.x},enumerable:!0,configurable:!0}),t.prototype.isDefinedAt=function(t){return!0},t.prototype.intersect=function(t){return this.isVertical&&t.isVertical?this.minX===t.minX:!!this.isVertical||(!!t.isVertical||(this.slope!==t.slope||this.yIntercept===t.yIntercept))},t.prototype.getIntersectionPoint=function(t){if(this.intersect(t)){var e,i;this.isVertical&&t.isVertical?(e=this.minX,i=t.minY):this.isVertical?(e=this.minX,i=t.slope*e+t.yIntercept):t.isVertical?(e=t.minX,i=this.slope*e+this.yIntercept):this.slope===t.slope?(e=t.minX,i=t.minY):(e=-(this.yIntercept-t.yIntercept)/(this.slope-t.slope),i=this.slope*e+this.yIntercept);var n=new a(e,i);return this.isDefinedAt(n)&&t.isDefinedAt(n)&&n}},t}(),r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.isDefinedAt=function(t){if(t.x<this.minX||this.maxX<t.x)return!1;if(this.isVertical)return this.minY<=t.y&&t.y<=this.maxY;var e=this.slope*t.x+this.yIntercept;return this.minY<=e&&e<=this.maxY},e}(s),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.isDefinedAt=function(t){if(!this.isDefinedAtX(t.x))return!1;if(this.isVertical)return this.minY<=t.y&&t.y<=this.maxY;var e=this.slope*t.x+this.yIntercept;return this.isDefinedAtY(e)},e.prototype.isDefinedAtX=function(t){return this.from.x<=this.to.x?t>=this.from.x:t<=this.from.x},e.prototype.isDefinedAtY=function(t){return this.from.y<=this.to.y?t>=this.from.y:t<=this.from.y},e.prototype.getNearestIntersectionPointFromOrigin=function(t){for(var e=this,i=[],n=0,o=t;n<o.length;n++){var s=o[n],r=this.getIntersectionPoint(s);r&&i.push(r)}return i.sort((function(t,i){return e.from.getDistance(t)-e.from.getDistance(i)})),i[0]},e}(s),a=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t.prototype.getDistance=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},t.prototype.getDegreeBetween=function(t){var e=Math.acos((t.x-this.x)/this.getDistance(t));return t.y<this.y?2*Math.PI-e:e},t.prototype.rotateAround=function(e,i){var n=Math.cos(i)*(this.x-e.x)-Math.sin(i)*(this.y-e.y),o=Math.sin(i)*(this.x-e.x)+Math.cos(i)*(this.y-e.y);return new t(n+e.x,o+e.y)},t}(),c=function(){function t(t){this.size=t,this.map=this.createMap(t),this.edges=[],this.points=[],this.updateEdges(),this.updatePoints()}return t.prototype.isFilled=function(t,e){return this.map[t][e].filled},t.prototype.toggle=function(t,e){var i=Math.floor(t),n=Math.floor(e);this.map[i][n].filled=!this.map[i][n].filled,this.updateEdges(),this.updatePoints()},t.prototype.updateEdges=function(){this.edges=[];for(var t=0;t<this.size;t+=1)for(var e=0;e<this.size;e+=1)this.map[t][e]={filled:this.map[t][e].filled},this.map[t][e].filled&&(this.checkTopCell(t,e),this.checkBottomCell(t,e),this.checkLeftCell(t,e),this.checkRightCell(t,e))},t.prototype.updatePoints=function(){this.points=[];for(var t=0,e=this.edges;t<e.length;t++){var i=e[t];this.points.push(i.from),this.points.push(i.to)}},t.prototype.getCastingPoints=function(t){var e=this.getCastingPointsFrom(t);return this.sortCastingPointsCounterClockwiseBasedOn(t,e),e},t.prototype.getCastingPointsFrom=function(t){for(var e=[],i=0,n=this.points;i<n.length;i++)for(var o=n[i],s=0,r=this.getCastingRays(t,o);s<r.length;s++){var h=r[s].getNearestIntersectionPointFromOrigin(this.edges);h&&e.push(h)}return e},t.prototype.getCastingRays=function(t,e){return[new h(t,e),new h(t,e.rotateAround(t,.01)),new h(t,e.rotateAround(t,-.01))]},t.prototype.sortCastingPointsCounterClockwiseBasedOn=function(t,e){e.sort((function(e,i){return t.getDegreeBetween(e)-t.getDegreeBetween(i)}))},t.prototype.checkTopCell=function(t,e){if(t-1>=0&&!this.map[t-1][e].filled)if(e-1>=0&&this.map[t][e-1].up){(i=this.map[t][e-1].up).to.x+=1,this.map[t][e].up=i}else{var i=new r(new a(e,t),new a(e+1,t));this.map[t][e].up=i,this.edges.push(i)}},t.prototype.checkBottomCell=function(t,e){if(t+1<this.size&&!this.map[t+1][e].filled)if(e-1>=0&&this.map[t][e-1].down){(i=this.map[t][e-1].down).to.x+=1,this.map[t][e].down=i}else{var i=new r(new a(e,t+1),new a(e+1,t+1));this.map[t][e].down=i,this.edges.push(i)}},t.prototype.checkLeftCell=function(t,e){if(e-1>=0&&!this.map[t][e-1].filled)if(t-1>=0&&this.map[t-1][e].left){(i=this.map[t-1][e].left).to.y+=1,this.map[t][e].left=i}else{var i=new r(new a(e,t),new a(e,t+1));this.map[t][e].left=i,this.edges.push(i)}},t.prototype.checkRightCell=function(t,e){if(e+1<this.size&&!this.map[t][e+1].filled)if(t-1>=0&&this.map[t-1][e].right){(i=this.map[t-1][e].right).to.y+=1,this.map[t][e].right=i}else{var i=new r(new a(e+1,t),new a(e+1,t+1));this.map[t][e].right=i,this.edges.push(i)}},t.prototype.createMap=function(t){for(var e=[],i=0;i<t;i+=1){for(var n=[],o=0;o<t;o+=1)n.push({filled:0===i||0===o||i===t-1||o===t-1});e.push(n)}return e},t}(),p=function(){function t(t,e){this.size=t,this.map=e,this.element=this.createCanvasElement(t),this.addOnClickHandler(),this.addOnMouseOverHandler(),this.addOnMouseOutHandler(),this.scale=this.size/e.size}return t.prototype.createCanvasElement=function(t){var e=document.createElement("canvas");return e.width=t,e.height=t,e.setAttribute("style","border: 1px solid;"),document.getElementById("main").appendChild(e),e},t.prototype.addOnClickHandler=function(){var t=this;this.element.onclick=function(e){t.map.toggle(e.offsetY/t.scale,e.offsetX/t.scale)}},t.prototype.addOnMouseOverHandler=function(){var t=this;this.element.onmousemove=function(e){t.cursorPosition=new a(e.offsetX/t.scale,e.offsetY/t.scale)}},t.prototype.addOnMouseOutHandler=function(){var t=this;this.element.onmouseout=function(e){t.cursorPosition=void 0}},t.prototype.draw=function(t){this.clearCanvas(),this.drawCell(),t.showEdges&&this.drawEdges(),this.drawShadowCasting(t)},t.prototype.clearCanvas=function(){var t=this.element.getContext("2d");t.fillStyle="black",t.fillRect(0,0,this.size,this.size)},t.prototype.drawCell=function(){for(var t=this.element.getContext("2d"),e=0;e<this.size;e+=this.scale)for(var i=0;i<this.size;i+=this.scale)this.map.isFilled(Math.floor(e/this.scale),Math.floor(i/this.scale))&&(t.fillStyle="#0000ff",t.fillRect(i,e,this.scale,this.scale))},t.prototype.drawEdges=function(){var t=this;this.map.edges.forEach((function(e){var i=t.scale/4;t.drawPoint(e.from,i),t.drawLine(e),t.drawPoint(e.to,i)}))},t.prototype.drawShadowCasting=function(t){if(this.cursorPosition&&this.showShadowCasting()){var e=this.map.getCastingPoints(this.cursorPosition);this.drawGradientShadow(this.cursorPosition,e);for(var i=0,n=e;i<n.length;i++){var o=n[i];t.showIntersectionPoints&&this.drawIntersectionPoint(o),t.showCastingLines&&this.drawCastingLine(this.cursorPosition,o)}}},t.prototype.showShadowCasting=function(){return!!this.cursorPosition&&!this.map.isFilled(Math.floor(this.cursorPosition.y),Math.floor(this.cursorPosition.x))},t.prototype.drawCastingLine=function(t,e){this.drawLine(new s(t,e),"yellow")},t.prototype.drawIntersectionPoint=function(t){this.drawPoint(t,this.scale/8,"green")},t.prototype.drawPoint=function(t,e,i){void 0===i&&(i="red");var n=this.element.getContext("2d");n.beginPath(),n.arc(t.x*this.scale,t.y*this.scale,e,0,2*Math.PI),n.fillStyle=i,n.fill(),n.stroke()},t.prototype.drawLine=function(t,e){void 0===e&&(e="white");var i=this.element.getContext("2d");i.beginPath(),i.moveTo(t.from.x*this.scale,t.from.y*this.scale),i.lineTo(t.to.x*this.scale,t.to.y*this.scale),i.strokeStyle=e,i.stroke()},t.prototype.drawGradientShadow=function(t,e){var i=this.element.getContext("2d").createRadialGradient(t.x*this.scale,t.y*this.scale,1,t.x*this.scale,t.y*this.scale,this.size/4);i.addColorStop(0,"white"),i.addColorStop(1,"black"),this.drawShape(e,i)},t.prototype.drawShape=function(t,e){void 0===e&&(e="white");var i=this.element.getContext("2d");if(t.length>0){i.beginPath();var n=t.length;i.moveTo(t[0].x*this.scale,t[0].y*this.scale);for(var o=1;o<=n;o+=1)i.lineTo(t[o%n].x*this.scale,t[o%n].y*this.scale);i.closePath(),i.fillStyle=e,i.fill()}},t}(),l=function(){function t(t){this.options=t,this.createOptionsCheckboxElements()}return t.prototype.createOptionsCheckboxElements=function(){var t=this,e=document.createElement("div"),i=this.createCheckboxElementWithLabelAndOnChange("showCastingLines","Show casting lines",(function(e,i){t.options.showCastingLines=e.checked}),this.options.showCastingLines);e.appendChild(i);var n=this.createCheckboxElementWithLabelAndOnChange("showEdges","Show edges",(function(e,i){t.options.showEdges=e.checked}),this.options.showEdges);e.appendChild(n);var o=this.createCheckboxElementWithLabelAndOnChange("showIntersectionPoints","Show intersection points",(function(e,i){t.options.showIntersectionPoints=e.checked}),this.options.showIntersectionPoints);e.appendChild(o),document.getElementById("main").appendChild(e)},t.prototype.createCheckboxElementWithLabelAndOnChange=function(t,e,i,n){void 0===n&&(n=!1);var o=document.createElement("div");return o.appendChild(this.createCheckboxElementWithOnChange(t,i,n)),o.appendChild(this.createLabelElementFor(t,e)),o},t.prototype.createCheckboxElementWithOnChange=function(t,e,i){void 0===i&&(i=!1);var n=document.createElement("input");return n.setAttribute("type","checkbox"),n.setAttribute("name",t),n.onchange=function(t){e(n,t)},n.checked=i,n},t.prototype.createLabelElementFor=function(t,e){var i=document.createElement("label");return i.setAttribute("for",t),i.innerText=e,i},t}();new(function(){function t(t,e,i){this.map=new c(t/e),this.fps=i,this.options={showCastingLines:!1,showEdges:!1,showIntersectionPoints:!1},this.optionsPanel=new l(this.options),this.canvas=new p(t,this.map)}return t.prototype.run=function(){var t=this;setInterval((function(){t.canvas.draw(t.options)}),1e3/this.fps)},t}())(640,16,60).run()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,